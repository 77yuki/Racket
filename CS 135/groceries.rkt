#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 74 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1           0 3781 0 17 3 85
(4
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(5
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 24 29 1 #"\n"
0 0 26 3 7 #"#reader"
0 0 24 3 1 #"("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"htdp-beginner-abbr-reader.ss\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"lang\""
0 0 24 3 3 #")(("
0 0 14 3 7 #"modname"
0 0 24 3 1 #" "
0 0 14 3 9 #"groceries"
0 0 24 3 3 #") ("
0 0 14 3 19 #"read-case-sensitive"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #") ("
0 0 14 3 10 #"teachpacks"
0 0 24 3 6 #" ()) ("
0 0 14 3 13 #"htdp-settings"
0 0 24 3 3 #" #("
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 11 #"constructor"
0 0 24 3 1 #" "
0 0 14 3 17 #"repeating-decimal"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 4 #"none"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #" () "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; ***************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;       Yuqi Gu (20884580)"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;       CS 135 Fall 2020"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;       Assignment 05, Problem 2"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";; ***************************************************"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 7 #"grocery"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dept"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"cost"
0 0 24 3 1 #" "
0 0 14 3 4 #"mass"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";; A Grocery is a (make-grocery Str Str Num Num)"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; Requires: cost >= 0, mass > 0."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";; A Store is a (listof Grocery)"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; Requires: no two items have both the same dept and same name."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"apple\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"rice\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.95"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"dairy\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"milk\""
0 0 24 3 1 #" "
0 0 21 3 4 #"3.99"
0 0 24 3 1 #" "
0 0 21 3 4 #"4000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"pinto\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.99"
0 0 24 3 1 #" "
0 0 21 3 4 #"5000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"275"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"wheat\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.69"
0 0 24 3 1 #" "
0 0 21 3 3 #"450"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"dairy\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"cheese\""
0 0 24 3 1 #" "
0 0 21 3 4 #"6.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"900"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1.99"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"peach\""
0 0 24 3 1 #" "
0 0 21 3 4 #"3.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"lentil\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"800"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 0 21 3 4 #"4.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"850"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"dairy\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"kefir\""
0 0 24 3 1 #" "
0 0 21 3 4 #"5.99"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"kwik-e-mart"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"rice\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.38"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"can\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 0 21 3 4 #"4.00"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"pinto\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"apple\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"can\""
0 0 24 3 1 #" "
0 0 19 3 14 #"\"creamed eels\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.19"
0 0 24 3 1 #" "
0 0 21 3 3 #"350"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"pineapple\""
0 0 24 3 1 #" "
0 0 21 3 4 #"3.17"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";; 2a)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"student-shop"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"peach\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.15"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1.26"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"rice\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.71"
0 0 24 3 1 #" "
0 0 21 3 3 #"800"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"can\""
0 0 24 3 1 #" "
0 0 19 3 13 #"\"creamed eel\""
0 0 24 3 1 #" "
0 0 21 3 4 #"20.6"
0 0 24 3 1 #" "
0 0 21 3 3 #"120"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.14"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"grape\""
0 0 24 3 1 #" "
0 0 21 3 4 #"8.13"
0 0 24 3 1 #" "
0 0 21 3 3 #"270"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"can\""
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Canned luncheon meat\""
0 0 24 3 1 #" "
0 0 21 3 4 #"12.5"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.62"
0 0 24 3 1 #" "
0 0 21 3 3 #"900"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"can\""
0 0 24 3 1 #" "
0 0 19 3 14 #"\"Canned fruit\""
0 0 24 3 1 #" "
0 0 21 3 3 #"8.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"340"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pear\""
0 0 24 3 1 #" "
0 0 21 3 4 #"3.14"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"pinto\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1.22"
0 0 24 3 1 #" "
0 0 21 3 3 #"300"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";; 2b)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"interval"
0 0 24 3 2 #" ("
0 0 14 3 2 #"lo"
0 0 24 3 1 #" "
0 0 14 3 2 #"hi"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";; An Interval is a (make-interval (anyof 'dontcare Num)"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;                                 (anyof 'dontcare Num))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";; (in-interval? Num Interval) determines whether Num is in the"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;   Interval or not"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"in-interval?"
0 0 24 3 1 #" "
0 0 21 3 2 #"42"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"make-interval"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"in-interval?"
0 0 24 3 1 #" "
0 0 21 3 2 #"34"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"make-interval"
0 0 24 3 1 #" "
0 0 21 3 2 #"35"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 3 #")) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"in-interval?"
0 0 24 3 1 #" "
0 0 21 3 2 #"34"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"make-interval"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 1 #" "
0 0 21 3 2 #"35"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";; in-interval?: Num Interval -> Bool"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"in-interval?"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 1 #" "
0 0 14 3 8 #"Interval"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-lo"
0 0 24 3 1 #" "
0 0 14 3 8 #"Interval"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-hi"
0 0 24 3 1 #" "
0 0 14 3 8 #"Interval"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-hi"
0 0 24 3 1 #" "
0 0 14 3 8 #"Interval"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 3 #"])]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-hi"
0 0 24 3 1 #" "
0 0 14 3 8 #"Interval"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-lo"
0 0 24 3 1 #" "
0 0 14 3 8 #"Interval"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-lo"
0 0 24 3 1 #" "
0 0 14 3 8 #"Interval"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 3 #"])]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-lo"
0 0 24 3 1 #" "
0 0 14 3 8 #"Interval"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 3 #"Num"
0 0 24 3 2 #" ("
0 0 14 3 11 #"interval-hi"
0 0 24 3 1 #" "
0 0 14 3 8 #"Interval"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 5 #"])]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; Tests:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"in-interval?"
0 0 24 3 1 #" "
0 0 21 3 2 #"25"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"make-interval"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"in-interval?"
0 0 24 3 1 #" "
0 0 21 3 4 #"72.6"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"make-interval"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #")) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"in-interval?"
0 0 24 3 1 #" "
0 0 21 3 4 #"30.1"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"make-interval"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #")) "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"in-interval?"
0 0 24 3 1 #" "
0 0 21 3 5 #"3.167"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"make-interval"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 3 #")) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";; 2c)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";; A StrPatt is a (anyof Str 'dontcare)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"query"
0 0 24 3 2 #" ("
0 0 14 3 4 #"dept"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"cost"
0 0 24 3 1 #" "
0 0 14 3 4 #"mass"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; A GroceryQuery is a"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;   (make-query StrPatt StrPatt Interval Interval)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 72
(6
 #";; (find-matches lstofgro groquery) produces a list containing the i"
 #"tems"
) 0 0 24 29 1 #"\n"
0 0 17 3 48 #";;   from the lstofgro that satisfy the groquery"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-matches"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-query"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 13 #"make-interval"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 13 #"make-interval"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"rice\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.95"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"pinto\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"wheat\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"lentil\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"800"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 0 21 3 4 #"4.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"850"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";; find-matches: (listof Grocery) GroceryQuery -> (listof Grocery)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-matches"
0 0 24 3 1 #" "
0 0 14 3 8 #"lstofgro"
0 0 24 3 1 #" "
0 0 14 3 8 #"groquery"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 8 #"lstofgro"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"query-dept"
0 0 24 3 1 #" "
0 0 14 3 8 #"groquery"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 12 #"grocery-dept"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 8 #"lstofgro"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"query-dept"
0 0 24 3 1 #" "
0 0 14 3 8 #"groquery"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"query-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"groquery"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 12 #"grocery-name"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 8 #"lstofgro"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"query-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"groquery"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 12 #"in-interval?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"grocery-cost"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 8 #"lstofgro"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"query-cost"
0 0 24 3 1 #" "
0 0 14 3 8 #"groquery"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 12 #"in-interval?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"grocery-mass"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 8 #"lstofgro"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 10 #"query-mass"
0 0 24 3 1 #" "
0 0 14 3 8 #"groquery"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 8 #"lstofgro"
0 0 24 3 3 #") ("
0 0 14 3 12 #"find-matches"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 8 #"lstofgro"
0 0 24 3 2 #") "
0 0 14 3 8 #"groquery"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-matches"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 8 #"lstofgro"
0 0 24 3 2 #") "
0 0 14 3 8 #"groquery"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ]"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-matches"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 8 #"lstofgro"
0 0 24 3 2 #") "
0 0 14 3 8 #"groquery"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-matches"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 8 #"lstofgro"
0 0 24 3 2 #") "
0 0 14 3 8 #"groquery"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-matches"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 8 #"lstofgro"
0 0 24 3 2 #") "
0 0 14 3 8 #"groquery"
0 0 24 3 6 #")])]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";; Tests:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-matches"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-query"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 13 #"make-interval"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 13 #"make-interval"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"275"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 0 21 3 4 #"4.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"850"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-matches"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-query"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 13 #"make-interval"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 1 #" "
0 0 21 3 4 #"3.00"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 13 #"make-interval"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"dontcare"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"rice\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.95"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"lentil\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"800"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";; 2d)"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";; (sort-dept-name store) produces the same values in store, sorted"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;   alphabetically by department, then alphabetically by name"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"sort-dept-name"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1.99"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"275"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"dairy\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"cheese\""
0 0 24 3 1 #" "
0 0 21 3 4 #"6.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"900"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"dairy\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"kefir\""
0 0 24 3 1 #" "
0 0 21 3 4 #"5.99"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"dairy\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"milk\""
0 0 24 3 1 #" "
0 0 21 3 4 #"3.99"
0 0 24 3 1 #" "
0 0 21 3 4 #"4000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"apple\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.69"
0 0 24 3 1 #" "
0 0 21 3 3 #"450"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"peach\""
0 0 24 3 1 #" "
0 0 21 3 4 #"3.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.99"
0 0 24 3 1 #" "
0 0 21 3 4 #"5000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 0 21 3 4 #"4.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"850"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"lentil\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"800"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"pinto\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"rice\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.95"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"wheat\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; sort-dept-name: Store -> Store"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 4 #" ) ("
0 0 14 3 16 #"sort-dept-helper"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"find-minimum"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"find-maximum"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1.99"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"275"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"dairy\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"cheese\""
0 0 24 3 1 #" "
0 0 21 3 4 #"6.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"900"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"dairy\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"kefir\""
0 0 24 3 1 #" "
0 0 21 3 4 #"5.99"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"dairy\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"milk\""
0 0 24 3 1 #" "
0 0 21 3 4 #"3.99"
0 0 24 3 1 #" "
0 0 21 3 4 #"4000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"apple\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.69"
0 0 24 3 1 #" "
0 0 21 3 3 #"450"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"peach\""
0 0 24 3 1 #" "
0 0 21 3 4 #"3.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.99"
0 0 24 3 1 #" "
0 0 21 3 4 #"5000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 0 21 3 4 #"4.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"850"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"lentil\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"800"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"pinto\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"rice\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.95"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"wheat\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"grocery-dept"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #")) "
0 0 14 3 1 #"d"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #") ("
0 0 14 3 3 #"get"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 1 #"d"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 24 3 1 #" "
0 0 14 3 10 #"finalstore"
0 0 24 3 1 #" "
0 0 14 3 12 #"sort-by-dept"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"grocery-dept"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 3 #") ("
0 0 14 3 12 #"grocery-dept"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 10 #"finalstore"
0 0 24 3 2 #" ("
0 0 14 3 16 #"sort-name-helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 14 3 12 #"sort-by-dept"
0 0 24 3 2 #" ("
0 0 14 3 12 #"grocery-dept"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"sort"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 10 #"finalstore"
0 0 24 3 2 #" ("
0 0 14 3 16 #"sort-name-helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"get"
0 0 24 3 1 #" "
0 0 14 3 12 #"sort-by-dept"
0 0 24 3 2 #" ("
0 0 14 3 12 #"grocery-dept"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 12 #"sort-by-dept"
0 0 24 3 2 #" ("
0 0 14 3 13 #"find-minimum2"
0 0 24 3 1 #" "
0 0 14 3 12 #"sort-by-dept"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 2 #") "
0 0 14 3 3 #"max"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"sort-dept-helper"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"275"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"dairy\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"milk\""
0 0 24 3 1 #" "
0 8          10 21 8 #"399/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"4000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"dairy\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"cheese\""
0 0 24 3 1 #" "
0 8          10 21 8 #"649/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"900"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"dairy\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"kefir\""
0 0 24 3 1 #" "
0 8          10 21 8 #"599/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"apple\""
0 0 24 3 1 #" "
0 8          10 21 8 #"249/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 8          10 21 8 #"299/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"5000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 8          10 21 7 #"69/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"450"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"peach\""
0 0 24 3 1 #" "
0 8          10 21 8 #"399/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 8          10 21 7 #"99/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"rice\""
0 0 24 3 1 #" "
0 8          10 21 6 #"19/20\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"pinto\""
0 0 24 3 1 #" "
0 8          10 21 8 #"249/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"wheat\""
0 0 24 3 1 #" "
0 8          10 21 7 #"49/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"lentil\""
0 0 24 3 1 #" "
0 8          10 21 8 #"299/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"800"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 8          10 21 8 #"499/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"850"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"sort-dept-helper"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"sort-dept"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #" ) "
0 0 14 3 5 #"store"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-minimum"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 12 #"find-maximum"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(7
 #";; (sort-dept finalstore store min max) produces the same values in "
 #"store,"
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #";;   sorted alphabetically by department"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"sort-dept"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #" ) "
0 0 14 3 10 #"try-n-save"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 12 #"find-minimum"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 12 #"find-maximum"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"275"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"dairy\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"milk\""
0 0 24 3 1 #" "
0 8          10 21 8 #"399/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"4000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"dairy\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"cheese\""
0 0 24 3 1 #" "
0 8          10 21 8 #"649/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"900"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"dairy\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"kefir\""
0 0 24 3 1 #" "
0 8          10 21 8 #"599/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"apple\""
0 0 24 3 1 #" "
0 8          10 21 8 #"249/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 8          10 21 8 #"299/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"5000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 8          10 21 7 #"69/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"450"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"peach\""
0 0 24 3 1 #" "
0 8          10 21 8 #"399/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"400"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 8          10 21 7 #"99/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"rice\""
0 0 24 3 1 #" "
0 8          10 21 6 #"19/20\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"pinto\""
0 0 24 3 1 #" "
0 8          10 21 8 #"249/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"wheat\""
0 0 24 3 1 #" "
0 8          10 21 7 #"49/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"lentil\""
0 0 24 3 1 #" "
0 8          10 21 8 #"299/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"800"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 8          10 21 8 #"499/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"850"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; sort-dept: Store Store Grocery Grocery -> Store"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"sort-dept"
0 0 24 3 1 #" "
0 0 14 3 10 #"finalstore"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 3 #") ("
0 0 14 3 11 #"add-grocery"
0 0 24 3 1 #" "
0 0 14 3 10 #"finalstore"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"sort-dept"
0 0 24 3 2 #" ("
0 0 14 3 11 #"add-grocery"
0 0 24 3 1 #" "
0 0 14 3 10 #"finalstore"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 5 #"store"
0 0 24 3 2 #" ("
0 0 14 3 13 #"find-minimum2"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 2 #") "
0 0 14 3 3 #"max"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(8
 #";; (find-minimum store min) produces the first value with the minimu"
 #"m"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#";;   department in store according to alphabet compared with min"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-minimum"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"apple\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; find-minimum: Store Grocery -> Grocery"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-minimum"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 3 #"min"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string<?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"grocery-dept"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"grocery-dept"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 12 #"find-minimum"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-minimum"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 3 #"min"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(9
 #";; (add-grocery finalstore store min) adds each value that has the s"
 #"ame"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(10
 #";;   department as the department of min in store into the finalstor"
 #"e"
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"add-grocery"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #" ) "
0 0 14 3 10 #"try-n-save"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-minimum"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"275"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; add-grocery: Store Store Grocery -> Store"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"add-grocery"
0 0 24 3 1 #" "
0 0 14 3 10 #"finalstore"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 10 #"finalstore"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"grocery-dept"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"grocery-dept"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 11 #"add-grocery"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 10 #"finalstore"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 3 #"min"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 11 #"add-grocery"
0 0 24 3 1 #" "
0 0 14 3 10 #"finalstore"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 3 #"min"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(11
 #";; (find-minimum2 store lastmin min) produces the first value with t"
 #"he"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(12
 #";;   minimum department that is bigger than the department of lastmi"
 #"n"
) 0 0 24 29 1 #"\n"
0 0 17 3 53 #";;   in store according to alphabet compared with min"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"find-minimum2"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"apple\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"rice\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.95"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"rice\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.95"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; find-minimum2: Store Grocery Grocery -> Grocery"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"find-minimum2"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 7 #"lastmin"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 3 #"min"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string<?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"grocery-dept"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"grocery-dept"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"string>?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"grocery-dept"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"grocery-dept"
0 0 24 3 1 #" "
0 0 14 3 7 #"lastmin"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 13 #"find-minimum2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 7 #"lastmin"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"find-minimum2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 7 #"lastmin"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 69
(13
 #";; (find-maximum store max) produces the first value with the maximu"
 #"m"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#";;   department in store according to alphabet compared with max"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-maximum"
0 0 24 3 1 #" "
0 0 14 3 10 #"try-n-save"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"produce\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"apple\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"rice\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.95"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; find-maximun: Store Grocery -> Grocery"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-maximum"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 3 #"max"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string>?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"grocery-dept"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"grocery-dept"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 12 #"find-maximum"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-maximum"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 3 #"max"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"275"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"rice\""
0 0 24 3 1 #" "
0 8          10 21 6 #"19/20\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"pinto\""
0 0 24 3 1 #" "
0 8          10 21 8 #"249/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"wheat\""
0 0 24 3 1 #" "
0 8          10 21 7 #"49/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"lentil\""
0 0 24 3 1 #" "
0 8          10 21 8 #"299/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"800"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 8          10 21 8 #"499/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"850"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(14
 #";; (sort-name finalstore store min max) produces the same values in "
 #"store,"
) 0 0 24 29 1 #"\n"
0 0 17 3 34 #";;   sorted alphabetically by name"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"sort-name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #" ) "
0 0 14 3 3 #"lst"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 17 #"find-minimum/name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 17 #"find-maximum/name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"275"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"sort-name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #" ) "
0 0 14 3 4 #"lst2"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 17 #"find-minimum/name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 17 #"find-maximum/name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 0 21 3 4 #"4.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"850"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"lentil\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.99"
0 0 24 3 1 #" "
0 0 21 3 3 #"800"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"pinto\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"rice\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.95"
0 0 24 3 1 #" "
0 0 21 3 4 #"1000"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"seed\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"wheat\""
0 0 24 3 1 #" "
0 0 21 3 4 #"0.49"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; sort-name: Store Store Grocery Grocery -> Store"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"sort-name"
0 0 24 3 1 #" "
0 0 14 3 10 #"finalstore"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 3 #") ("
0 0 14 3 16 #"add-grocery/name"
0 0 24 3 1 #" "
0 0 14 3 10 #"finalstore"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"sort-name"
0 0 24 3 2 #" ("
0 0 14 3 16 #"add-grocery/name"
0 0 24 3 1 #" "
0 0 14 3 10 #"finalstore"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 5 #"store"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-minimum2/name"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 2 #") "
0 0 14 3 3 #"max"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"sort-name-helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"275"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"sort-name-helper"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 9 #"sort-name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #" ) "
0 0 14 3 5 #"store"
0 0 24 3 2 #" ("
0 0 14 3 17 #"find-minimum/name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 17 #"find-maximum/name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(15
 #";; (find-minimum/name store min) produces the first value with the m"
 #"inimum"
) 0 0 24 29 1 #"\n"
0 0 17 3 58
#";;   name in store according to alphabet compared with min"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 17 #"find-minimum/name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; find-minimum/name: Store Grocery -> Grocery"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"find-minimum/name"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 3 #"min"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string<?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"grocery-name"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"grocery-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 17 #"find-minimum/name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 17 #"find-minimum/name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 3 #"min"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(16
 #";; (add-grocery/name finalstore store min) adds each value that has "
 #"the"
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#";;   same name as the name of min in store into the finalstore"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"add-grocery/name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 3 #" ) "
0 0 14 3 3 #"lst"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 17 #"find-minimum/name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; add-grocery/name: Store Store Grocery -> Store"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"add-grocery/name"
0 0 24 3 1 #" "
0 0 14 3 10 #"finalstore"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 10 #"finalstore"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"grocery-name"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"grocery-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 16 #"add-grocery/name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 10 #"finalstore"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 3 #"min"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 16 #"add-grocery/name"
0 0 24 3 1 #" "
0 0 14 3 10 #"finalstore"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 3 #"min"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 71
(17
 #";; (find-minimum2/name store lastmin min) produces the first value w"
 #"ith"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";;   the minimum"
0 0 17 3 54 #" name that is bigger than the name of lastmin in store"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;   according to alphabet compared with min"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-minimum2/name"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"banana\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"corn\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"275"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; find-minimum2/name: Store Grocery Grocery -> Grocery"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-minimum2/name"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 7 #"lastmin"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 3 #"min"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string<?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"grocery-name"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"grocery-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"string>?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"grocery-name"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"grocery-name"
0 0 24 3 1 #" "
0 0 14 3 7 #"lastmin"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 18 #"find-minimum2/name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 7 #"lastmin"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-minimum2/name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 7 #"lastmin"
0 0 24 3 1 #" "
0 0 14 3 3 #"min"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(18
 #";; find-maximum/name store max) produces the first value with the ma"
 #"ximum"
) 0 0 24 29 1 #"\n"
0 0 17 3 58
#";;   name in store according to alphabet compared with max"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"find-maximum"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #" ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 12 #"make-grocery"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"chips\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"potato\""
0 0 24 3 1 #" "
0 8          10 21 8 #"199/100\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; find-maximun/name: Store Grocery -> Grocery"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"find-maximum/name"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 3 #"max"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string>?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"grocery-name"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"grocery-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"max"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 17 #"find-maximum/name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 17 #"find-maximum/name"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #") "
0 0 14 3 3 #"max"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0           0
